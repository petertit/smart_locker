# face_recog_live.py - Logic nh·∫≠n di·ªán c·ªët l√µi (Refactor)
import cv2
import face_recognition
import numpy as np
from picamera2 import Picamera2
import time
import sys
# Gi·∫£ s·ª≠ load_encodings ƒë∆∞·ª£c ƒë∆∞a v√†o train_faces.py
from train_faces import load_encodings 

RECOGNITION_TOLERANCE = 0.6 

def recognize_frame(frame_bgr):
    """
    H√†m nh·∫≠n di·ªán ch√≠nh: Nh·∫≠n m·ªôt khung h√¨nh BGR (OpenCV) v√† tr·∫£ v·ªÅ t√™n.
    D√πng cho c·∫£ ch·∫ø ƒë·ªô Laptop (remote) v√† RasPi (c·ª•c b·ªô).
    """
    knownEncodings, knownNames = load_encodings()
    detected_name = "Unknown"
    
    if not knownEncodings:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu encodings ƒë·ªÉ nh·∫≠n di·ªán.")
        return "Unknown"

    # Chuy·ªÉn ƒë·ªïi m√†u t·ª´ BGR sang RGB cho face_recognition
    rgb_frame = cv2.cvtColor(frame_bgr, cv2.COLOR_BGR2RGB)
    
    boxes = face_recognition.face_locations(rgb_frame, model="hog")
    encodings = face_recognition.face_encodings(rgb_frame, boxes)

    for encoding in encodings:
        matches = face_recognition.compare_faces(
            knownEncodings, encoding, tolerance=RECOGNITION_TOLERANCE
        )
        name = "Unknown"
        
        if True in matches:
            matchedIdxs = [i for (i, b) in enumerate(matches) if b]
            counts = {}
            for i in matchedIdxs:
                n = knownNames[i]
                counts[n] = counts.get(n, 0) + 1
            name = max(counts, key=counts.get)
        
        if name != "Unknown":
            detected_name = name
            break
            
    return detected_name

def recognize_live_from_raspi_cam():
    """
    H√†m c≈©: D√πng camera RasPi tr·ª±c ti·∫øp, ƒë∆∞·ª£c g·ªçi d∆∞·ªõi d·∫°ng subprocess.
    """
    print("[üëÅÔ∏è] ƒêang b·∫≠t nh·∫≠n di·ªán khu√¥n m·∫∑t RasPi (Live)...")
    picam2 = Picamera2()
    picam2.configure(picam2.create_preview_configuration(main={"format": 'XRGB8888', "size": (640, 480)}))
    picam2.start()
    time.sleep(2) 

    start_time = time.time()
    timeout = 10 
    result_name = "Unknown"

    while time.time() - start_time < timeout:
        frame = picam2.capture_array()
        frame_bgr = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR) 
        
        name = recognize_frame(frame_bgr)
        
        if name != "Unknown":
            result_name = name
            print(f"Detected: {result_name}") 
            break
        
        time.sleep(0.1)

    picam2.close()
    print(f"[‚úÖ] K·∫øt qu·∫£: {result_name}")
    return result_name

if __name__ == "__main__":
    recognize_live_from_raspi_cam()
# Ch·∫°y tr·ª±c ti·∫øp ƒë·ªÉ ki·ªÉm tra