from flask import Flask, request, jsonify, Response
from flask_cors import CORS
import subprocess
import cv2
from picamera2 import Picamera2
from libcamera import controls
import threading
import time
import os
import base64
import numpy as np
import sys
import RPi.GPIO as GPIO # ƒê√£ import
import atexit # ƒê√£ import

from face_recog_live import recognize_frame
from train_faces import train_dataset

app = Flask(__name__)
CORS(app)

# --- GPIO Setup for Locker ---
RELAY_PIN = 17
ON = GPIO.HIGH # Signal to activate relay (unlock)
OFF = GPIO.LOW  # Signal to deactivate relay (lock)
# B·ªè UNLOCK_DURATION v√¨ kh√¥ng c√≤n d√πng pulse

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(RELAY_PIN, GPIO.OUT)
GPIO.output(RELAY_PIN, OFF) # ƒê·∫£m b·∫£o relay T·∫ÆT khi kh·ªüi ƒë·ªông
print(f"‚úÖ GPIO pin {RELAY_PIN} setup for locker control. Initial state: OFF.")

def cleanup_gpio():
    print("üßπ Cleaning up GPIO...")
    GPIO.cleanup()
atexit.register(cleanup_gpio)
# --- End GPIO Setup ---


# --- Camera Setup (Existing) ---
picam2 = Picamera2()
config = picam2.create_video_configuration(main={"size": (640, 480)})
picam2.configure(config)
picam2.set_controls({ "AwbMode": controls.AwbModeEnum.Auto, "AeEnable": True,"ExposureTime": 20000,"AnalogueGain": 2.0, })
picam2.start()
last_frame = None
lock = threading.Lock()
def update_frame():
    global last_frame
    while True:
        frame = picam2.capture_array()
        with lock: last_frame = frame
        time.sleep(0.05)
thread = threading.Thread(target=update_frame, daemon=True)
thread.start()
# --- End Camera Setup ---

# --- Helper Functions (Existing) ---
def save_frame_and_train(frame_bgr, name, file_suffix=""):
    folder = os.path.join("dataset", name)
    os.makedirs(folder, exist_ok=True)
    file_path = os.path.join(folder, f"{int(time.time())}_{file_suffix}.jpg")
    cv2.imwrite(file_path, frame_bgr)
    return file_path
# --- End Helper Functions ---


# --- Existing Endpoints (No changes needed here) ---
@app.route("/status")
def status(): return jsonify({"status": "‚úÖ Raspberry Pi camera online"})

@app.route("/video_feed")
def video_feed():
    def generate():
        global last_frame
        while True:
            with lock:
                if last_frame is not None:
                    frame_bgr = cv2.cvtColor(last_frame, cv2.COLOR_RGB2BGR)
                    _, buffer = cv2.imencode(".jpg", frame_bgr)
                    frame = buffer.tobytes()
                    yield (b"--frame\r\nContent-Type: image/jpeg\r\n\r\n" + frame + b"\r\n")
            time.sleep(0.03)
    return Response(generate(), mimetype="multipart/x-mixed-replace; boundary=frame")

@app.route("/capture-batch", methods=["POST"])
def capture_batch():
    try:
        data = request.get_json() or {}
        name = data.get("name", "unknown").replace(" ", "_").lower()
        saved_files = []
        for i in range(5):
            with lock:
                if last_frame is None: return jsonify({"success": False, "error": "Camera ch∆∞a s·∫µn s√†ng"})
                frame_to_save = last_frame.copy()
            frame_bgr = cv2.cvtColor(frame_to_save, cv2.COLOR_RGB2BGR)
            file_path = save_frame_and_train(frame_bgr, name, f"raspi_{i}")
            saved_files.append(file_path)
            time.sleep(0.5)
        train_dataset()
        return jsonify({"success": True, "saved_files": saved_files, "saved_file": saved_files[0]})
    except Exception as e: return jsonify({"success": False, "error": str(e)})

@app.route("/capture-remote-batch", methods=["POST"])
def capture_remote_batch():
    try:
        data = request.get_json() or {}
        name = data.get("name", "unknown").replace(" ", "_").lower()
        images_data = data.get("images_data", [])
        if len(images_data) != 5: return jsonify({"success": False, "error": f"Kh√¥ng nh·∫≠n ƒë·ªß 5 ·∫£nh. ƒê√£ nh·∫≠n {len(images_data)}."})
        saved_files = []
        for i, image_data in enumerate(images_data):
            decoded_data = base64.b64decode(image_data)
            np_arr = np.frombuffer(decoded_data, np.uint8)
            frame_bgr = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
            if frame_bgr is None: return jsonify({"success": False, "error": f"L·ªói gi·∫£i m√£ ·∫£nh th·ª© {i}"})
            file_path = save_frame_and_train(frame_bgr, name, f"remote_{i}")
            saved_files.append(file_path)
        train_dataset()
        return jsonify({"success": True, "saved_files": saved_files, "saved_file": saved_files[0]})
    except Exception as e: return jsonify({"success": False, "error": str(e)})

@app.route("/recognize-remote", methods=["POST"])
def recognize_remote():
    try:
        data = request.get_json() or {}
        image_data = data.get("image_data")
        if not image_data: return jsonify({"success": False, "error": "Kh√¥ng c√≥ d·ªØ li·ªáu ·∫£nh"})
        decoded_data = base64.b64decode(image_data)
        np_arr = np.frombuffer(decoded_data, np.uint8)
        frame_bgr = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
        if frame_bgr is None: return jsonify({"success": False, "error": "Kh√¥ng th·ªÉ gi·∫£i m√£ ·∫£nh"})
        detected_name = recognize_frame(frame_bgr)
        return jsonify({"success": detected_name != "Unknown", "name": detected_name})
    except Exception as e: return jsonify({"success": False, "error": str(e)})

@app.route("/recognize", methods=["GET"])
def old_recognize():
    try:
        output = subprocess.check_output(["python3", "face_recog_live.py"], text=True, timeout=15)
        if "Detected:" in output:
            name = output.split("Detected:")[-1].strip()
            return jsonify({"success": True, "name": name})
        return jsonify({"success": False, "error": "Khong nhan dien duoc khuon mat"})
    except Exception as e: return jsonify({"success": False, "error": str(e)})
# --- End Existing Endpoints ---


# --- ‚úÖ S·ª¨A ENDPOINT: /unlock ---
@app.route("/unlock", methods=["POST"])
def unlock_locker():
    """ B·∫≠t Relay ON ƒë·ªÉ m·ªü kh√≥a v√† gi·ªØ nguy√™n tr·∫°ng th√°i ON """
    try:
        data = request.get_json() or {}
        locker_id = data.get("lockerId")
        user_email = data.get("user")
        print(f"üîì Received unlock request for locker: {locker_id} by user: {user_email}. Turning relay ON.")

        # Ch·ªâ b·∫≠t Relay ON
        GPIO.output(RELAY_PIN, ON)
        print(f"‚ö° Relay PIN {RELAY_PIN} is now ON (Unlocked)")

        return jsonify({"success": True, "message": f"Locker {locker_id} unlocked (Relay ON)"})

    except Exception as e:
        print(f"‚ùå Error during unlock: {str(e)}")
        # Kh√¥ng c·∫ßn t·∫Øt relay v√¨ m·ª•c ti√™u l√† gi·ªØ ON
        return jsonify({"success": False, "error": str(e)}), 500
# --- End S·ª≠a /unlock ---


# --- ‚úÖ TH√äM ENDPOINT M·ªöI: /lock ---
@app.route("/lock", methods=["POST"])
def lock_locker():
    """ T·∫Øt Relay OFF ƒë·ªÉ kh√≥a t·ªß """
    try:
        data = request.get_json() or {}
        locker_id = data.get("lockerId") # L·∫•y lockerId t·ª´ request (g·ª≠i t·ª´ open.js)
        user_email = data.get("user") # C√≥ th·ªÉ d√πng ƒë·ªÉ log n·∫øu c·∫ßn

        print(f"üîí Received lock request for locker: {locker_id} by user: {user_email}. Turning relay OFF.")

        # T·∫Øt Relay OFF
        GPIO.output(RELAY_PIN, OFF)
        print(f"‚ö° Relay PIN {RELAY_PIN} is now OFF (Locked)")

        return jsonify({"success": True, "message": f"Locker {locker_id} locked (Relay OFF)"})

    except Exception as e:
        print(f"‚ùå Error during lock: {str(e)}")
        # ƒê·∫£m b·∫£o relay v·∫´n OFF n·∫øu c√≥ l·ªói
        GPIO.output(RELAY_PIN, OFF)
        return jsonify({"success": False, "error": str(e)}), 500
# --- End Th√™m /lock ---


# --- Flask App Run ---
if __name__ == "__main__":
    print("üöÄ Raspberry Pi server with Locker Control (Hold Open) running on port 5000 ...")
    app.run(host="0.0.0.0", port=5000)
# --- End Flask App Run ---