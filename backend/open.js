const RENDER_BRIDGE = "https://smart-locker-kgnx.onrender.com";
const LOCKER_COUNT = 9;

const userRaw = sessionStorage.getItem("user");
const currentUser = userRaw ? JSON.parse(userRaw) : null;
const currentUserId = currentUser ? currentUser.id : null;

let lockerStates = {};

// ‚úÖ H√ÄM G·ª¨I L·ªÜNH KH√ìA ƒê·∫æN PI (TH√îNG QUA BRIDGE)
async function sendLockCommand(lockerId) {
  try {
    console.log(`Sending lock command for locker ${lockerId}`);
    const res = await fetch(`${RENDER_BRIDGE}/raspi/lock`, {
      // <-- G·ªçi endpoint /raspi/lock tr√™n Bridge
      method: "POST",
      headers: { "Content-Type": "application/json" },
      // G·ª≠i k√®m lockerId v√† email (Pi c√≥ th·ªÉ d√πng ƒë·ªÉ log)
      body: JSON.stringify({ lockerId: lockerId, user: currentUser?.email }),
    });
    const data = await res.json();
    if (res.ok && data.success) {
      console.log(`Lock command for ${lockerId} successful.`);
      return true;
    } else {
      console.error(
        `Lock command failed for ${lockerId}:`,
        data.error || "Unknown error"
      );
      alert(
        `‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i l·ªánh kh√≥a ƒë·∫øn t·ªß ${lockerId}: ${
          data.error || "L·ªói kh√¥ng x√°c ƒë·ªãnh"
        }`
      );
      return false;
    }
  } catch (err) {
    console.error(`Network error sending lock command for ${lockerId}:`, err);
    alert(`‚ùå L·ªói m·∫°ng khi g·ª≠i l·ªánh kh√≥a cho t·ªß ${lockerId}.`);
    return false;
  }
}

// --- C√°c h√†m kh√°c (updateUserField, fetchLockerStates, updateLockerStatus, updateGridUI, handleLockerClick) gi·ªØ nguy√™n ---
async function updateUserField(field, value) {
  /* ... gi·ªØ nguy√™n ... */
}
async function fetchLockerStates() {
  /* ... gi·ªØ nguy√™n ... */
}
async function updateLockerStatus(lockerId, newStatus, newOwnerId) {
  /* ... gi·ªØ nguy√™n ... */
}
function updateGridUI() {
  /* ... gi·ªØ nguy√™n ... */
}
function handleLockerClick(lockerId) {
  /* ... gi·ªØ nguy√™n ... */
}
// --- H·∫øt ph·∫ßn gi·ªØ nguy√™n ---

// ‚úÖ S·ª¨A: H√†m n√†y g·ªçi sendLockCommand v√† updateLockerStatus
async function handleCloseLocker(lockerId) {
  if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën ƒë√≥ng t·ªß ${lockerId} v√† kh√≥a n√≥?`)) {
    // 1. G·ª≠i l·ªánh kh√≥a v·∫≠t l√Ω ƒë·∫øn Pi
    const lockSent = await sendLockCommand(lockerId);

    // 2. Ch·ªâ c·∫≠p nh·∫≠t DB n·∫øu l·ªánh g·ª≠i th√†nh c√¥ng (ho·∫∑c b·∫°n c√≥ th·ªÉ b·ªè qua b∆∞·ªõc check n√†y n·∫øu mu·ªën DB lu√¥n c·∫≠p nh·∫≠t)
    if (lockSent) {
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i DB th√†nh LOCKED (v·∫´n gi·ªØ ownerId)
      await updateLockerStatus(lockerId, "LOCKED", currentUserId);
      alert(`ƒê√£ kh√≥a t·ªß ${lockerId}.`);
    } else {
      alert(`Kh√¥ng th·ªÉ kh√≥a t·ªß ${lockerId} do l·ªói g·ª≠i l·ªánh.`);
    }
  }
}
// G√°n v√†o window (gi·ªØ nguy√™n)
window.handleCloseLocker = handleCloseLocker;

// ‚úÖ H√ÄM N√ÄY GI·ªÆ NGUY√äN LOGIC
async function handleUnregister(lockerId) {
  if (
    confirm(
      `B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒëƒÉng k√Ω t·ªß ${lockerId}? H√†nh ƒë·ªông n√†y s·∫Ω x√≥a quy·ªÅn s·ªü h·ªØu c·ªßa b·∫°n v√† t·ªß s·∫Ω tr·ªü n√™n tr·ªëng.`
    )
  ) {
    const lockerUpdated = await updateLockerStatus(lockerId, "EMPTY", null);
    if (lockerUpdated) {
      await updateUserField("registeredLocker", null);
      alert(`ƒê√£ h·ªßy ƒëƒÉng k√Ω t·ªß ${lockerId}.`);
    }
  }
}
// G√°n v√†o window (gi·ªØ nguy√™n)
window.handleUnregister = handleUnregister;

// ‚úÖ S·ª¨A: H√†m n√†y g·ªçi sendLockCommand cho t·ª´ng t·ªß tr∆∞·ªõc khi logout
window.handleLogoutAndLock = function () {
  if (currentUserId) {
    const lockPromises = []; // M·∫£ng ch·ª©a c√°c promise g·ª≠i l·ªánh kh√≥a

    // T√¨m c√°c t·ªß ƒëang m·ªü c·ªßa ng∆∞·ªùi d√πng
    Object.keys(lockerStates).forEach((lockerId) => {
      const state = lockerStates[lockerId];
      if (state.status === "OPEN" && state.userId === currentUserId) {
        // Th√™m promise g·ª≠i l·ªánh kh√≥a v√†o m·∫£ng
        lockPromises.push(sendLockCommand(lockerId));
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i DB th√†nh LOCKED song song
        updateLockerStatus(lockerId, "LOCKED", currentUserId);
      }
    });

    if (lockPromises.length > 0) {
      console.log(
        `Attempting to lock ${lockPromises.length} open locker(s) before logout...`
      );
      // ƒê·ª£i t·∫•t c·∫£ c√°c l·ªánh kh√≥a ƒë∆∞·ª£c g·ª≠i ƒëi (th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i)
      Promise.allSettled(lockPromises).then((results) => {
        // Ki·ªÉm tra xem c√≥ l·ªói n√†o kh√¥ng (ch·ªâ ƒë·ªÉ th√¥ng b√°o)
        const failedLocks = results.filter(
          (r) =>
            r.status === "rejected" || (r.status === "fulfilled" && !r.value)
        );
        if (failedLocks.length > 0) {
          alert(
            `‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi c·ªë g·∫Øng kh√≥a ${failedLocks.length} t·ªß tr∆∞·ªõc khi ƒëƒÉng xu·∫•t. Vui l√≤ng ki·ªÉm tra l·∫°i.`
          );
        } else {
          alert("ƒê√£ kh√≥a c√°c t·ªß ƒëang m·ªü c·ªßa b·∫°n.");
        }
        // Lu√¥n th·ª±c hi·ªán ƒëƒÉng xu·∫•t
        sessionStorage.removeItem("user");
        alert("ƒêƒÉng xu·∫•t th√†nh c√¥ng.");
        window.location.href = "logon.html";
      });
    } else {
      // Kh√¥ng c√≥ t·ªß n√†o ƒëang m·ªü, ƒëƒÉng xu·∫•t ngay
      sessionStorage.removeItem("user");
      alert("ƒêƒÉng xu·∫•t th√†nh c√¥ng.");
      window.location.href = "logon.html";
    }
  } else {
    // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ user
    sessionStorage.removeItem("user");
    window.location.href = "logon.html";
  }
};

// ‚úÖ H√ÄM N√ÄY GI·ªÆ NGUY√äN (V·∫´n g·ªçi /raspi/unlock ƒë·ªÉ B·∫¨T relay)
window.openLockerSuccess = (lockerId) => {
  if (!lockerId) {
    alert("L·ªói: Kh√¥ng t√¨m th·∫•y lockerId ƒë·ªÉ m·ªü.");
    return;
  }
  // 1. G·ª≠i l·ªánh B·∫¨T relay ƒë·∫øn Pi (th√¥ng qua Bridge)
  fetch(`${RENDER_BRIDGE}/raspi/unlock`, {
    /* ... body ... */
  })
    .then((res) => res.json())
    .then((unlockData) => {
      if (!unlockData.success && unlockData.error) {
        alert("‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i l·ªánh m·ªü kh√≥a ƒë·∫øn Pi: " + unlockData.error);
      }
      // 2. C·∫≠p nh·∫≠t DB th√†nh OPEN v√† g√°n quy·ªÅn s·ªü h·ªØu
      return updateLockerStatus(lockerId, "OPEN", currentUserId);
    })
    .then(async (lockerUpdated) => {
      if (lockerUpdated) {
        // 3. L∆∞u t·ªß v√†o t√†i kho·∫£n user (n·∫øu ch∆∞a c√≥)
        const userLocker = currentUser.registeredLocker;
        if (
          !userLocker ||
          userLocker === "null" ||
          userLocker === "undefined"
        ) {
          await updateUserField("registeredLocker", lockerId);
        }
        alert(`üîì T·ªß ${lockerId} ƒë√£ m·ªü th√†nh c√¥ng! (Relay ƒëang B·∫¨T)`);
        // 4. Chuy·ªÉn h∆∞·ªõng v·ªÅ index.html
        window.location.href = "./index.html";
      } else {
        alert(`‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i t·ªß ${lockerId}.`);
      }
    })
    .catch((err) => {
      /* ... x·ª≠ l√Ω l·ªói ... */
    });
};

// ‚úÖ H√ÄM N√ÄY GI·ªÆ NGUY√äN
document.addEventListener("DOMContentLoaded", () => {
  const path = window.location.pathname;
  if (
    path.endsWith("index.html") ||
    path.endsWith("open.html") ||
    path === "/"
  ) {
    if (path.endsWith("open.html")) {
      /* ... g√°n s·ª± ki·ªán cho grid ... */
    }
    fetchLockerStates();
  }
});
